// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ctreminiom/go-atlassian/pkg/infra/models"
	mock "github.com/stretchr/testify/mock"
)

// Board is an autogenerated mock type for the Board type
type Board struct {
	mock.Mock
}

// Backlog provides a mock function with given fields: ctx, boardId, startAt, maxResults, opts
func (_m *Board) Backlog(ctx context.Context, boardId int, startAt int, maxResults int, opts *models.IssueOptionScheme) (*models.BoardIssuePageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId, startAt, maxResults, opts)

	var r0 *models.BoardIssuePageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *models.IssueOptionScheme) *models.BoardIssuePageScheme); ok {
		r0 = rf(ctx, boardId, startAt, maxResults, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardIssuePageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, *models.IssueOptionScheme) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId, startAt, maxResults, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int, *models.IssueOptionScheme) error); ok {
		r2 = rf(ctx, boardId, startAt, maxResults, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Configuration provides a mock function with given fields: ctx, boardId
func (_m *Board) Configuration(ctx context.Context, boardId int) (*models.BoardConfigurationScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId)

	var r0 *models.BoardConfigurationScheme
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.BoardConfigurationScheme); ok {
		r0 = rf(ctx, boardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardConfigurationScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, boardId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Create provides a mock function with given fields: ctx, payload
func (_m *Board) Create(ctx context.Context, payload *models.BoardPayloadScheme) (*models.BoardScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, payload)

	var r0 *models.BoardScheme
	if rf, ok := ret.Get(0).(func(context.Context, *models.BoardPayloadScheme) *models.BoardScheme); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, *models.BoardPayloadScheme) *models.ResponseScheme); ok {
		r1 = rf(ctx, payload)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *models.BoardPayloadScheme) error); ok {
		r2 = rf(ctx, payload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: ctx, boardId
func (_m *Board) Delete(ctx context.Context, boardId int) (*models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId)

	var r0 *models.ResponseScheme
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.ResponseScheme); ok {
		r0 = rf(ctx, boardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseScheme)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, boardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Epics provides a mock function with given fields: ctx, boardId, startAt, maxResults, done
func (_m *Board) Epics(ctx context.Context, boardId int, startAt int, maxResults int, done bool) (*models.BoardEpicPageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId, startAt, maxResults, done)

	var r0 *models.BoardEpicPageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, bool) *models.BoardEpicPageScheme); ok {
		r0 = rf(ctx, boardId, startAt, maxResults, done)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardEpicPageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, bool) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId, startAt, maxResults, done)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int, bool) error); ok {
		r2 = rf(ctx, boardId, startAt, maxResults, done)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Filter provides a mock function with given fields: ctx, filterId, startAt, maxResults
func (_m *Board) Filter(ctx context.Context, filterId int, startAt int, maxResults int) (*models.BoardPageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, filterId, startAt, maxResults)

	var r0 *models.BoardPageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) *models.BoardPageScheme); ok {
		r0 = rf(ctx, filterId, startAt, maxResults)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardPageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) *models.ResponseScheme); ok {
		r1 = rf(ctx, filterId, startAt, maxResults)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int) error); ok {
		r2 = rf(ctx, filterId, startAt, maxResults)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: ctx, boardId
func (_m *Board) Get(ctx context.Context, boardId int) (*models.BoardScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId)

	var r0 *models.BoardScheme
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.BoardScheme); ok {
		r0 = rf(ctx, boardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, boardId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Gets provides a mock function with given fields: ctx, opts, startAt, maxResults
func (_m *Board) Gets(ctx context.Context, opts *models.GetBoardsOptions, startAt int, maxResults int) (*models.BoardPageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, opts, startAt, maxResults)

	var r0 *models.BoardPageScheme
	if rf, ok := ret.Get(0).(func(context.Context, *models.GetBoardsOptions, int, int) *models.BoardPageScheme); ok {
		r0 = rf(ctx, opts, startAt, maxResults)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardPageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, *models.GetBoardsOptions, int, int) *models.ResponseScheme); ok {
		r1 = rf(ctx, opts, startAt, maxResults)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *models.GetBoardsOptions, int, int) error); ok {
		r2 = rf(ctx, opts, startAt, maxResults)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Issues provides a mock function with given fields: ctx, boardId, startAt, maxResults, opts
func (_m *Board) Issues(ctx context.Context, boardId int, startAt int, maxResults int, opts *models.IssueOptionScheme) (*models.BoardIssuePageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId, startAt, maxResults, opts)

	var r0 *models.BoardIssuePageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *models.IssueOptionScheme) *models.BoardIssuePageScheme); ok {
		r0 = rf(ctx, boardId, startAt, maxResults, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardIssuePageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, *models.IssueOptionScheme) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId, startAt, maxResults, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int, *models.IssueOptionScheme) error); ok {
		r2 = rf(ctx, boardId, startAt, maxResults, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssuesByEpic provides a mock function with given fields: ctx, boardId, epicId, startAt, maxResults, opts
func (_m *Board) IssuesByEpic(ctx context.Context, boardId int, epicId int, startAt int, maxResults int, opts *models.IssueOptionScheme) (*models.BoardIssuePageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId, epicId, startAt, maxResults, opts)

	var r0 *models.BoardIssuePageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, int, *models.IssueOptionScheme) *models.BoardIssuePageScheme); ok {
		r0 = rf(ctx, boardId, epicId, startAt, maxResults, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardIssuePageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, int, *models.IssueOptionScheme) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId, epicId, startAt, maxResults, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int, int, *models.IssueOptionScheme) error); ok {
		r2 = rf(ctx, boardId, epicId, startAt, maxResults, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssuesBySprint provides a mock function with given fields: ctx, boardId, sprintId, startAt, maxResults, opts
func (_m *Board) IssuesBySprint(ctx context.Context, boardId int, sprintId int, startAt int, maxResults int, opts *models.IssueOptionScheme) (*models.BoardIssuePageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId, sprintId, startAt, maxResults, opts)

	var r0 *models.BoardIssuePageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, int, *models.IssueOptionScheme) *models.BoardIssuePageScheme); ok {
		r0 = rf(ctx, boardId, sprintId, startAt, maxResults, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardIssuePageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, int, *models.IssueOptionScheme) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId, sprintId, startAt, maxResults, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int, int, *models.IssueOptionScheme) error); ok {
		r2 = rf(ctx, boardId, sprintId, startAt, maxResults, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IssuesWithoutEpic provides a mock function with given fields: ctx, boardId, startAt, maxResults, opts
func (_m *Board) IssuesWithoutEpic(ctx context.Context, boardId int, startAt int, maxResults int, opts *models.IssueOptionScheme) (*models.BoardIssuePageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId, startAt, maxResults, opts)

	var r0 *models.BoardIssuePageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, *models.IssueOptionScheme) *models.BoardIssuePageScheme); ok {
		r0 = rf(ctx, boardId, startAt, maxResults, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardIssuePageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, *models.IssueOptionScheme) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId, startAt, maxResults, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int, *models.IssueOptionScheme) error); ok {
		r2 = rf(ctx, boardId, startAt, maxResults, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Move provides a mock function with given fields: ctx, boardId, payload
func (_m *Board) Move(ctx context.Context, boardId int, payload *models.BoardMovementPayloadScheme) (*models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId, payload)

	var r0 *models.ResponseScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.BoardMovementPayloadScheme) *models.ResponseScheme); ok {
		r0 = rf(ctx, boardId, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseScheme)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *models.BoardMovementPayloadScheme) error); ok {
		r1 = rf(ctx, boardId, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Projects provides a mock function with given fields: ctx, boardId, startAt, maxResults
func (_m *Board) Projects(ctx context.Context, boardId int, startAt int, maxResults int) (*models.BoardProjectPageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId, startAt, maxResults)

	var r0 *models.BoardProjectPageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) *models.BoardProjectPageScheme); ok {
		r0 = rf(ctx, boardId, startAt, maxResults)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardProjectPageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId, startAt, maxResults)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int) error); ok {
		r2 = rf(ctx, boardId, startAt, maxResults)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Sprints provides a mock function with given fields: ctx, boardId, startAt, maxResults, states
func (_m *Board) Sprints(ctx context.Context, boardId int, startAt int, maxResults int, states []string) (*models.BoardSprintPageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardId, startAt, maxResults, states)

	var r0 *models.BoardSprintPageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, []string) *models.BoardSprintPageScheme); ok {
		r0 = rf(ctx, boardId, startAt, maxResults, states)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardSprintPageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, []string) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardId, startAt, maxResults, states)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int, []string) error); ok {
		r2 = rf(ctx, boardId, startAt, maxResults, states)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Versions provides a mock function with given fields: ctx, boardID, startAt, maxResults, released
func (_m *Board) Versions(ctx context.Context, boardID int, startAt int, maxResults int, released bool) (*models.BoardVersionPageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, boardID, startAt, maxResults, released)

	var r0 *models.BoardVersionPageScheme
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, bool) *models.BoardVersionPageScheme); ok {
		r0 = rf(ctx, boardID, startAt, maxResults, released)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardVersionPageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, bool) *models.ResponseScheme); ok {
		r1 = rf(ctx, boardID, startAt, maxResults, released)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int, bool) error); ok {
		r2 = rf(ctx, boardID, startAt, maxResults, released)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type NewBoardT interface {
	mock.TestingT
	Cleanup(func())
}

// NewBoard creates a new instance of Board. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBoard(t NewBoardT) *Board {
	mock := &Board{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
