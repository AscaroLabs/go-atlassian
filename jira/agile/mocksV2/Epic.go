// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocksV2

import (
	context "context"

	models "github.com/ctreminiom/go-atlassian/pkg/infra/models"
	mock "github.com/stretchr/testify/mock"
)

// Epic is an autogenerated mock type for the Epic type
type Epic struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, epic
func (_m *Epic) Get(ctx context.Context, epic string) (*models.EpicScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, epic)

	var r0 *models.EpicScheme
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.EpicScheme); ok {
		r0 = rf(ctx, epic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EpicScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, string) *models.ResponseScheme); ok {
		r1 = rf(ctx, epic)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, epic)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Issues provides a mock function with given fields: ctx, epic, startAt, maxResults, opts
func (_m *Epic) Issues(ctx context.Context, epic string, startAt int, maxResults int, opts *models.IssueOptionScheme) (*models.BoardIssuePageScheme, *models.ResponseScheme, error) {
	ret := _m.Called(ctx, epic, startAt, maxResults, opts)

	var r0 *models.BoardIssuePageScheme
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, *models.IssueOptionScheme) *models.BoardIssuePageScheme); ok {
		r0 = rf(ctx, epic, startAt, maxResults, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BoardIssuePageScheme)
		}
	}

	var r1 *models.ResponseScheme
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, *models.IssueOptionScheme) *models.ResponseScheme); ok {
		r1 = rf(ctx, epic, startAt, maxResults, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.ResponseScheme)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int, *models.IssueOptionScheme) error); ok {
		r2 = rf(ctx, epic, startAt, maxResults, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Move provides a mock function with given fields: ctx, epic, issues
func (_m *Epic) Move(ctx context.Context, epic string, issues []string) (*models.ResponseScheme, error) {
	ret := _m.Called(ctx, epic, issues)

	var r0 *models.ResponseScheme
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) *models.ResponseScheme); ok {
		r0 = rf(ctx, epic, issues)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseScheme)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, epic, issues)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewEpicT interface {
	mock.TestingT
	Cleanup(func())
}

// NewEpic creates a new instance of Epic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEpic(t NewEpicT) *Epic {
	mock := &Epic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
